// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/avito-test-case/internal/pkg/transaction (interfaces: UseCase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/avito-test-case/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetUserTransactions mocks base method.
func (m *MockUseCase) GetUserTransactions(arg0 uint64, arg1 *models.PaginatorTransaction) ([]*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactions", arg0, arg1)
	ret0, _ := ret[0].([]*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactions indicates an expected call of GetUserTransactions.
func (mr *MockUseCaseMockRecorder) GetUserTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactions", reflect.TypeOf((*MockUseCase)(nil).GetUserTransactions), arg0, arg1)
}
